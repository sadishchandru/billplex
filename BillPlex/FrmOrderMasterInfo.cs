using BusinessLayer;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmOrderMasterInfo : DevExpress.XtraEditors.XtraForm
    {
        private OrderMasterInfo OrderMasterRequest;
        public FrmOrderMasterInfo()
        {
            InitializeComponent();
            OrderMasterRequest = new OrderMasterInfo();
            OrderMasterRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;
            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>
            {
                {"RawMaterialRequired",true},
                {"ProductModelRequired",true},
                {"ProductMasterRequired",true},
                {"CustomerMasterRequired",true},
                {"ColorMasterRequired",true}
            };
            var dropdwonList = OrderMasterRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "ProductModelRequired")
                {
                    OrderMasterRequest.ProductModelList = (List<DropDownItemInfo>)item.Value;
                }
                if (item.Key == "ProductMasterRequired")
                {
                    OrderMasterRequest.ProductMasterList = (List<DropDownItemInfo>)item.Value;
                }
                if (item.Key == "CustomerMasterRequired")
                {
                    OrderMasterRequest.CustomerMasterList = (List<DropDownItemInfo>)item.Value;
                }
                if (item.Key == "ColorMasterRequired")
                {
                    OrderMasterRequest.ColourMasterList = (List<DropDownItemInfo>)item.Value;
                }
            }


            if (OrderMasterRequest.ProductModelList != null)
            {
                if (OrderMasterRequest.ProductModelList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.ProductModelList)
                    {
                        drpProductName.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            if (OrderMasterRequest.CustomerMasterList != null)
            {
                if (OrderMasterRequest.CustomerMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.CustomerMasterList)
                    {
                        drpCustCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                        drpCustName.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            if (OrderMasterRequest.ColourMasterList != null)
            {
                if (OrderMasterRequest.ColourMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.ColourMasterList)
                    {
                        drpProColor.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            sqlDataSource1.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }
        public void ReloadSqlDataSource()
        {
            sqlDataSource1.FillAsync();
            gridView1.RefreshData();

        }
        private void comboBoxEdit10_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        #region Delete      
        private void btnDelete_Click(object sender, EventArgs e)
        {
            var selectedRows = gridView1.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                var id = gridView1.GetRowCellValue(rowHandle, "Id");

                OrderMasterRequest.Id = (Int64)id;
            }

            OrderMasterRequest.Delete();

            if (OrderMasterRequest.Result.Status == ResultStatus.Success)
            {
                XtraMessageBox.Show(OrderMasterRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ReloadSqlDataSource();
            }

        }
        #endregion

        #region Edit

        private void btnEdit_Click(object sender, EventArgs e)
        {
            try
            {
                var selectedRows = gridView1.GetSelectedRows();

                foreach (var rowHandle in selectedRows)
                {
                    OrderMasterRequest.Id = (int)gridView1.GetRowCellValue(rowHandle, "Id");
                    txtOrderNo.Text = (string)gridView1.GetRowCellValue(rowHandle, "OrderNo");
                    var datete = gridView1.GetRowCellValue(rowHandle, "Orderdate").ToString();
                    ddOrderDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                    drpCustCode.Text = (string)gridView1.GetRowCellValue(rowHandle, "Customcode");
                    drpCustName.Text = gridView1.GetRowCellValue(rowHandle, "CustomerId").ToString();
                    drpProductName.Text = (string)gridView1.GetRowCellValue(rowHandle, "ProductNameId").ToString();
                    drpModelName.Text = (string)gridView1.GetRowCellValue(rowHandle, "productcode");
                    drpModelCode.Text = (string)gridView1.GetRowCellValue(rowHandle, "productmodel");
                    drpProductSize.Text = (string)gridView1.GetRowCellValue(rowHandle, "productsize");
                    txtMaterialwt.Text = (string)gridView1.GetRowCellValue(rowHandle, "Quantity");
                    txtType.Text = (string)gridView1.GetRowCellValue(rowHandle, "RawType");
                    txtRawmatName.Text = (string)gridView1.GetRowCellValue(rowHandle, "RawmaterialId");
                    drpProColor.SelectedIndex = OrderMasterRequest.ColourMasterList.FindIndex(x => x.Id == Convert.ToInt32(gridView1.GetRowCellValue(rowHandle, "ColorId").ToString()));
                    var datet = gridView1.GetRowCellValue(rowHandle, "").ToString();
                    ddProDate.Text = datet != "Delivarydate" ? DateTime.Parse(datet).ToString("MM-dd-yyyy") : "";
                    drpStatus.Text = (string)gridView1.GetRowCellValue(rowHandle, "Status");
                    txtTotRawmat.Text = (string)gridView1.GetRowCellValue(rowHandle, "TotalRaw");
                    txtWages.Text = (string)gridView1.GetRowCellValue(rowHandle, "WagesforEmp");
                }
                btnAdd.Enabled = true;
                btnEdit.Enabled = false;
                btnDelete.Enabled = true;
                btnUpdate.Enabled = true;

            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        #endregion

        #region Add

        private void btnAdd_click(object sender, EventArgs e)
        {
            try
            {
                if (drpCustCode.Text != string.Empty && drpCustName.Text != string.Empty && txtOrderNo.Text != string.Empty)
                {

                    var selectedItems = drpCustName.Text;

                    string selectedMasterItem = (string)drpCustName.SelectedItem;

                    if (selectedMasterItem != null)
                    {
                        OrderMasterRequest.CustomerId = OrderMasterRequest.CustomerMasterList.FirstOrDefault(item => item.Name == selectedMasterItem.ToString())?.Id ?? -1;
                        OrderMasterRequest.CustomerCodeId = OrderMasterRequest.CustomerMasterList.FirstOrDefault(item => item.Name == selectedMasterItem.ToString())?.Id ?? -1;
                    }
                    var selectedPNameItems = drpProductName.Text;

                    string selectedPNameItem = (string)drpProductName.SelectedItem;

                    if (selectedPNameItems != null)
                    {
                        OrderMasterRequest.ProductNameId = OrderMasterRequest.ProductModelList.FirstOrDefault(item => item.Name == selectedPNameItem.ToString())?.Id ?? -1;
                    }

                    var selectedProColorItems = drpProColor.Text;

                    string selectedProColorItem = (string)drpProColor.SelectedItem;

                    if (selectedProColorItems != null)
                    {
                        OrderMasterRequest.ColorId = OrderMasterRequest.ColourMasterList.FirstOrDefault(item => item.Name == selectedProColorItem.ToString())?.Id ?? -1;
                    }

                    OrderMasterRequest.OrderNo = txtOrderNo.Text;
                    OrderMasterRequest.OrderDate = ddOrderDate.Text;
                    //OrderMasterRequest.CustomerCodeId = drpCustCode.Text;
                    OrderMasterRequest.ProductModel = drpModelName.Text;
                    OrderMasterRequest.ProductCode = drpModelCode.Text;
                    OrderMasterRequest.ProductSize = drpProductSize.Text;
                    OrderMasterRequest.RawMaterialId = txtRawmatName.Text;
                    OrderMasterRequest.Quantity = txtMaterialwt.Text;
                    OrderMasterRequest.RawType = txtType.Text;
                    OrderMasterRequest.RawQty = txtRawmatName.Text;
                    OrderMasterRequest.TotalRaw = txtQuantity.Text;
                    OrderMasterRequest.Deliverydate = ddProDate.Text;
                    OrderMasterRequest.status = drpStatus.Text;
                    OrderMasterRequest.TotalRaw = txtTotRawmat.Text;
                    OrderMasterRequest.WagesforEmp = txtWages.Text;
                    OrderMasterRequest.Update();

                    if (OrderMasterRequest.Result.Status == ResultStatus.Success)
                    {
                        XtraMessageBox.Show(OrderMasterRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        ReloadSqlDataSource();
                        btnClear_Click();
                    }
                    else
                    {
                        XtraMessageBox.Show(OrderMasterRequest.Result.Message, "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    XtraMessageBox.Show(OrderMasterRequest.Result.Message, "please give the manditory field", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }

            }

            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        #endregion

        private void drpProductSize_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpProductSize.SelectedItem;

            if (selectedItem != null)
            {
                txtMaterialwt.Text = OrderMasterRequest.ProductMasterList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
                txtType.Text = OrderMasterRequest.ProductMasterList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.Code ?? "";
                txtRawmatName.Text = OrderMasterRequest.ProductMasterList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.RawMaterial ?? "";
                txtWages.Text = OrderMasterRequest.ProductMasterList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }
        public void BindData(dynamic SelectedOrderList)
        {
            var selectedRows = SelectedOrderList.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                OrderMasterRequest.Id = (int)SelectedOrderList.GetRowCellValue(rowHandle, "Id");
                txtOrderNo.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "OrderNo");
                var datete = SelectedOrderList.GetRowCellValue(rowHandle, "Orderdate").ToString();
                ddOrderDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                drpCustCode.SelectedIndex = OrderMasterRequest.CustomerMasterList.FindIndex(x => x.Id == Convert.ToInt32(SelectedOrderList.GetRowCellValue(rowHandle, "Customcode").ToString()));
                drpCustName.SelectedIndex = OrderMasterRequest.CustomerMasterList.FindIndex(x => x.Id == Convert.ToInt32(SelectedOrderList.GetRowCellValue(rowHandle, "CustomerId").ToString()));
                drpProductName.SelectedIndex = OrderMasterRequest.ProductModelList.FindIndex(x => x.Id == Convert.ToInt32(SelectedOrderList.GetRowCellValue(rowHandle, "ProductNameId").ToString()));
                //drpCustCode.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "Customcode");
                //drpCustName.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "CustomerId").ToString();
                //drpProductName.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "ProductNameId").ToString();
                drpModelName.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "productcode");
                drpModelCode.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "productmodel");
                drpProductSize.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "productsize");
                txtMaterialwt.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "Quantity");
                txtType.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "RawType");
                txtRawmatName.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "RawmaterialId");
                drpProColor.SelectedIndex = OrderMasterRequest.ColourMasterList.FindIndex(x => x.Id == Convert.ToInt32(SelectedOrderList.GetRowCellValue(rowHandle, "ColorId").ToString()));
                txtQuantity.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "Quantity");
                //drpProColor.Text = (string)gridView1.GetRowCellValue(rowHandle, "ColorId");
                datete = SelectedOrderList.GetRowCellValue(rowHandle, "Delivarydate").ToString();
                ddProDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                drpStatus.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "Status");
                txtTotRawmat.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "TotalRaw");
                txtWages.Text = (string)SelectedOrderList.GetRowCellValue(rowHandle, "WagesforEmp");
            }
            btnAdd.Enabled = false;
            btnNew.Enabled = false;
            btnUpdate.Enabled = true;
            ReloadSqlDataSource();
        }

        #region Reset
        private void btnClear_Click(object sender = null, EventArgs e = null)
        {
            txtOrderNo.ResetText();
            ddOrderDate.ResetText();
            drpCustCode.ResetText();
            drpCustName.ResetText();
            drpProductName.ResetText();
            drpModelCode.ResetText();
            drpModelName.ResetText();
            drpProductSize.ResetText();
            txtMaterialwt.ResetText();
            txtType.ResetText();
            txtRawmatName.ResetText();
            drpProColor.ResetText();
            txtQuantity.ResetText();
            ddProDate.ResetText();
            drpStatus.ResetText();
            txtTotRawmat.ResetText();
            txtWages.ResetText();
        }
        #endregion

        //private void txtTotRawmat_EditValueChanged(object sender, EventArgs e)
        //{
        //    int a = Convert.ToInt32(txtMaterialwt.Text);
        //    int b = Convert.ToInt32(txtQuantity.Text);
        //    txtTotRawmat.Text = Convert.ToString(a * b);
        //}

        private void txtQuantity_EditValueChanged(object sender, EventArgs e)
        {
            var count = 0;
            if (txtMaterialwt.Text != "" && txtQuantity.Text != "")
            {
                var a = Convert.ToInt32(txtMaterialwt.Text);
                var b = Convert.ToInt32(txtQuantity.Text);
                count = (a * b);
                txtTotRawmat.Text = count.ToString();
            }
        }

        private void drpProductName_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectItem = drpProductName.Text;

            if (OrderMasterRequest.ProductMasterList != null && selectItem != "")
            {
                if (OrderMasterRequest.ProductMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.ProductMasterList)
                    {
                        if (item.productId == selectItem)
                        {
                            drpModelName.Properties.Items.Add(new ImageComboBoxItem(item.proModel));
                        }
                    }
                }
            }
        }
        private void drpModelName_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectItem = drpModelName.Text;

            if (OrderMasterRequest.ProductMasterList != null && selectItem != "")
            {
                if (OrderMasterRequest.ProductMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.ProductMasterList)
                    {
                        if (item.proModel == selectItem)
                        {
                            drpModelCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                        }
                    }
                }
            }
        }

        private void drpModelCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectItem = drpModelCode.Text;

            if (OrderMasterRequest.ProductMasterList != null && selectItem != "")
            {
                if (OrderMasterRequest.ProductMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in OrderMasterRequest.ProductMasterList)
                    {
                        if (item.Code == selectItem)
                        {
                            drpProductSize.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                        }
                    }
                }
            }
        }

        private void simpleButton2_Click(object sender, EventArgs e)
        {
            bool IsOpen = false;

            Form myForm = Application.OpenForms["FrmCustomerMaster"];
            if (myForm != null)
            {
                myForm.Close();
                myForm = new FrmCustomerMaster();
                myForm.MdiParent = this.MdiParent;
                myForm.Show();
                IsOpen = true;
            }
            if (IsOpen == false)
            {
                FrmCustomerMaster rawMaterial = new FrmCustomerMaster();
                rawMaterial.MdiParent = this.MdiParent;
                rawMaterial.Show();
            }
        }

        private void btnProName_Click(object sender, EventArgs e)
        {
            bool IsOpen = false;

            Form myForm = Application.OpenForms["FrmProductModel"];
            if (myForm != null)
            {
                myForm.Close();
                myForm = new FrmProductModel();
                myForm.MdiParent = this.MdiParent;
                myForm.Show();
                IsOpen = true;
            }
            if (IsOpen == false)
            {
                FrmProductModel productModel = new FrmProductModel();
                productModel.MdiParent = this.MdiParent;
                productModel.Show();
            }
        }

        private void btnProColor_Click(object sender, EventArgs e)
        {
            bool IsOpen = false;

            Form myForm = Application.OpenForms["FrmColorMaster"];
            if (myForm != null)
            {
                myForm.Close();
                myForm = new FrmColorMaster();
                myForm.MdiParent = this.MdiParent;
                myForm.Show();
                IsOpen = true;
            }
            if (IsOpen == false)
            {
                FrmColorMaster colorMaster = new FrmColorMaster();
                colorMaster.MdiParent = this.MdiParent;
                colorMaster.Show();
            }
        }
    }
}