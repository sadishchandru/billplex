using BusinessLayer;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Views.Grid;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmJobGivingWithoutDcInfo : DevExpress.XtraEditors.XtraForm
    {
        private JobGivingWithoutDc JobGivingWithoutDcRequest;

        private List<dynamic> JobGivingWithoutDcSource;

        private GridControl gridControl;

        private DataTable dt;

        public FrmJobGivingWithoutDcInfo()
        {
            InitializeComponent();
            InitializeDataSource();

            JobGivingWithoutDcRequest = new JobGivingWithoutDc();

            JobGivingWithoutDcRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;

            JobGivingWithoutDcRequest.List();
            JobGivingWithoutDcRequest.JobGivingWithoutDcListByOrder = new List<JobGivingWithoutDc>();

            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>
            {
                    { "EmployeePersonalRequired", true },
                    { "OrderMasterRequired", true },
            };

            var dropdwonList = JobGivingWithoutDcRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "EmployeePersonalRequired")
                {
                    JobGivingWithoutDcRequest.EmployeePersonalList = (List<DropDownItemInfo>)item.Value;
                }
                if (item.Key == "OrderMasterRequired")
                {
                    JobGivingWithoutDcRequest.OrderMasterList = (List<DropDownItemInfo>)item.Value;
                }
            }
            if (JobGivingWithoutDcRequest.EmployeePersonalList != null)
            {
                if (JobGivingWithoutDcRequest.EmployeePersonalList.Count() > 0)
                {
                    drpEmpCode.Properties.Items.Clear();
                    foreach (DropDownItemInfo item in JobGivingWithoutDcRequest.EmployeePersonalList)
                    {
                        drpEmpCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                    }
                }
            }
            if (JobGivingWithoutDcRequest.OrderMasterList != null)
            {

                if (JobGivingWithoutDcRequest.OrderMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in JobGivingWithoutDcRequest.OrderMasterList)
                    {
                        var foundItem = "";

                        foreach (string items in drpOrderNo.Properties.Items)
                        {
                            if (items.ToString() == item.Code.ToString())
                            {
                                foundItem = items;
                                break;
                            }
                        }
                        if (foundItem == "")
                        {
                            drpOrderNo.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                        }
                    }
                }
            }

            ddDate.DateTime = DateTime.Now;

            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
                if (ddDate.Text != null && ddDate.Text != null && ddDate.Text != string.Empty)
                {
                    string selectedItem = (string)drpEmpCode.SelectedItem;

                    if (selectedItem != null)
                    {
                        JobGivingWithoutDcRequest.EmployeeCode = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.Id ?? -1;
                    }
                    JobGivingWithoutDcRequest.EmployeeName = txtEmpName.Text;
                    JobGivingWithoutDcRequest.CompanyName = txtComName.Text;
                    JobGivingWithoutDcRequest.ClientCompany = txtCCom.Text;
                    JobGivingWithoutDcRequest.ClientName = txtClientName.Text;
                    JobGivingWithoutDcRequest.SubClientCompany = txtSCCom.Text;
                    JobGivingWithoutDcRequest.Date = ddDate.Text;
                    string selectedItems = (string)drpOrderNo.SelectedItem;
                    if (selectedItems != null)
                    {
                        JobGivingWithoutDcRequest.OrderNo = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedItems.ToString())?.Id.ToString() ?? "";
                    }
                    JobGivingWithoutDcRequest.OrderDate = ddODate.Text;
                    JobGivingWithoutDcRequest.CustomerCode = txtCCode.Text;
                    JobGivingWithoutDcRequest.CustomerName = txtCCName.Text;
                    JobGivingWithoutDcRequest.ModelName = drpMName.Text;
                    JobGivingWithoutDcRequest.ModelCode = drpMCode.Text;
                    JobGivingWithoutDcRequest.ProductName = txtPName.Text;
                    JobGivingWithoutDcRequest.ProductSize = txtPSize.Text;
                    JobGivingWithoutDcRequest.Color = drpColor.Text;
                    JobGivingWithoutDcRequest.RawMaterial = txtRawMaterial.Text;
                    JobGivingWithoutDcRequest.RawType = txtType.Text;
                    JobGivingWithoutDcRequest.QuantityPiece = txtQuantity.Text;
                    JobGivingWithoutDcRequest.WeightKg = txtWeight.Text;
                    JobGivingWithoutDcRequest.AvlQty = txtAvlQty.Text;
                    //JobGivingWithoutDcRequest.TotalQty = txtTQty.Text;
                    //JobGivingWithoutDcRequest.TotalWt = txtTotalWT.Text;
                    JobGivingWithoutDcRequest.Shortage = txtShortage.Text;
                    string OrderNo = (string)drpOrderNo.SelectedItem;
                    if (OrderNo != null)
                    {
                        JobGivingWithoutDcRequest.WagesEmp = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == OrderNo.ToString())?.WagesEmp ?? "";
                    }
                    string Director = (string)drpEmpCode.SelectedItem;
                    if (Director != null)
                    {
                        JobGivingWithoutDcRequest.Director = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == Director.ToString())?.AuthorName ?? "";
                    }
                    string subclient = (string)drpEmpCode.SelectedItem;
                    if (Director != null)
                    {
                        JobGivingWithoutDcRequest.Director = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == subclient.ToString())?.SubComName ?? "";
                    }
                    JobGivingWithoutDcRequest.Update();

                    if (JobGivingWithoutDcRequest.Result.Status == ResultStatus.Success)
                    {
                        XtraMessageBox.Show(JobGivingWithoutDcRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        if (JobGivingWithoutDcRequest.JobGivingWithoutDcListByOrder.Count() > 0)
                        {
                            foreach (var item in JobGivingWithoutDcRequest.JobGivingWithoutDcListByOrder)
                            {
                                DataTable dataTable = gridControl1.DataSource as DataTable;

                                DataRow newRow = dataTable.NewRow();
                                newRow["EmployeeCode"] = item.EmployeeCode;
                                newRow["EmployeeName"] = item.EmployeeName;
                                newRow["CompanyName"] = item.CompanyName;
                                newRow["Director"] = item.Director;
                                newRow["ClientCompany"] = item.ClientCompany;
                                newRow["ClientName"] = item.ClientName;
                                newRow["SubClientCompany"] = item.SubClientCompany;
                                newRow["subContractor"] = item.subContractor;
                                newRow["Date"] = item.Date;
                                newRow["OrderNo"] = item.OrderNo;
                                newRow["OrderDate"] = item.OrderDate;
                                newRow["CustomerCode"] = item.CustomerCode;
                                newRow["CustomerName"] = item.CustomerName;
                                newRow["ModelName"] = item.ModelCode;
                                newRow["ModelCode"] = item.ModelName;
                                newRow["ProductName"] = item.ProductName;
                                newRow["ProductSize"] = item.ProductSize;
                                newRow["Color"] = item.Color;
                                newRow["RawMaterial"] = item.RawMaterial;
                                newRow["Type"] = item.RawType;
                                newRow["QuantityPiece"] = item.QuantityPiece;
                                newRow["WeightKg"] = item.WeightKg;
                                newRow["AvlQty"] = item.AvlQty;
                                newRow["TotalQty"] = item.TotalQty;
                                newRow["TotalWt"] = item.TotalWt;
                                newRow["Excess"] = item.Excess;
                                newRow["Shortage"] = item.Shortage;

                                // Add the new DataRow to the DataTable
                                dataTable.Rows.Add(newRow);
                            }
                            btnClear_Click();
                            gridView1.RefreshData();
                            gridControl1.RefreshDataSource();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void drpEmpCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpEmpCode.SelectedItem;
            if (selectedItem != null)
            {
                txtComName.Text = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.proModel ?? "";
                txtCCom.Text = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.productId ?? "";
                txtSCCom.Text = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.SubCom ?? "";
                txtClientName.Text = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.RawMaterial ?? "";
                txtEmpName.Text = JobGivingWithoutDcRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.Name ?? "";
            }
        }

        private void drpOrderNo_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpOrderNo.SelectedItem;
            if (selectedItem != null)
            {
                txtCCode.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.AuthorName ?? "";
                txtCCName.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.proModel ?? "";
                var datete = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.Name ?? "";
                ddODate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                JobGivingWithoutDcRequest.OrderNo = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.Id.ToString() ?? "";
            }
            var selectItem = drpOrderNo.Text;

            if (JobGivingWithoutDcRequest.OrderMasterList != null && selectItem != "")
            {
                if (JobGivingWithoutDcRequest.OrderMasterList.Count() > 0)
                {
                    drpMName.Properties.Items.Clear();
                    foreach (DropDownItemInfo item in JobGivingWithoutDcRequest.OrderMasterList)
                    {
                        if (item.Code == selectItem)
                        {
                            drpMName.Properties.Items.Add(new ImageComboBoxItem(item.productId));
                        }
                    }

                    drpMName.ResetText();
                    drpMCode.ResetText();
                    txtPName.ResetText();
                    txtPSize.ResetText();
                    drpColor.ResetText();
                    txtRawMaterial.ResetText();
                    txtType.ResetText();
                    txtQuantity.ResetText();
                    txtWeight.ResetText();
                    txtAvlQty.ResetText();
                    txtShortage.ResetText();
                    lblOrderQtyNo.ResetText();
                    lblAvlQty.ResetText();
                }
            }
        }

        private void drpMName_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectItem = drpMName.Text;
            var ccode = txtCCode.Text;
            if (JobGivingWithoutDcRequest.OrderMasterList != null && selectItem != "")
            {
                if (JobGivingWithoutDcRequest.OrderMasterList.Count() > 0)
                {
                    drpMCode.Properties.Items.Clear();
                    foreach (DropDownItemInfo item in JobGivingWithoutDcRequest.OrderMasterList)
                    {
                        if (item.productId == selectItem && item.AuthorName == ccode)
                        {
                            drpMCode.Properties.Items.Add(new ImageComboBoxItem(item.RawMaterial));
                        }
                    }
                }
            }
        }

        private void drpMCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpMCode.SelectedItem;
            if (selectedItem != null)
            {
                txtPName.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.RawMaterial == selectedItem.ToString())?.SubCom ?? "";
                txtPSize.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.RawMaterial == selectedItem.ToString())?.SubComName ?? "";
            }
            var selectItem = drpMCode.Text;
            var MName = drpMName.Text;
            var ccode = txtCCode.Text;
            var psize = txtPSize.Text;
            if (JobGivingWithoutDcRequest.OrderMasterList != null && selectItem != "")
            {
                if (JobGivingWithoutDcRequest.OrderMasterList.Count() > 0)
                {
                    drpColor.Properties.Items.Clear();
                    foreach (DropDownItemInfo item in JobGivingWithoutDcRequest.OrderMasterList)
                    {
                        if (item.RawMaterial == selectItem && item.productId == MName && item.AuthorName == ccode && item.SubComName == psize)
                        {
                            drpColor.Properties.Items.Add(new ImageComboBoxItem(item.color));
                        }
                    }
                }
            }
        }

        private void drpColor_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpColor.SelectedItem;
            var selectModelItem = drpMCode.Text;
            int totalQuantity = 0;
            if (selectedItem != null)
            {

                if (JobGivingWithoutDcRequest.JobGivingWithoutDcList.Count() > 0 && JobGivingWithoutDcRequest.OrderNo != "")
                {
                    if (JobGivingWithoutDcRequest.JobGivingWithoutDcListByOrder.Count() > 0)
                    {
                        totalQuantity = JobGivingWithoutDcRequest.JobGivingWithoutDcListByOrder.Where(o => o.OrderNo == JobGivingWithoutDcRequest.OrderNo && o.ModelName == drpMName.Text && o.ModelCode == drpMCode.Text && o.Color == drpColor.Text).Sum(o => int.Parse(o.QuantityPiece));
                    }
                    else
                    {
                        totalQuantity = JobGivingWithoutDcRequest.JobGivingWithoutDcList.Where(o => o.OrderNo == JobGivingWithoutDcRequest.OrderNo && o.ModelName == drpMName.Text && o.ModelCode == drpMCode.Text && o.Color == drpColor.Text).Sum(o => int.Parse(o.QuantityPiece));
                    }
                }


                txtRawMaterial.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == drpOrderNo.Text && item.color == drpColor.Text && item.SubCom == txtPName.Text && item.SubComName == txtPSize.Text)?.RawName ?? "";
                txtType.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Code == drpOrderNo.Text && item.color == drpColor.Text && item.SubCom == txtPName.Text && item.SubComName == txtPSize.Text)?.RawType ?? "";

                //getQuantity

                var totalQty = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.RawName == txtRawMaterial.Text && item.RawType == txtType.Text && item.Code == drpOrderNo.Text && item.color == drpColor.Text && item.SubCom == txtPName.Text && item.SubComName == txtPSize.Text)?.OrderQty.ToString() ?? "";

                lblOrderQtyNo.Text = totalQuantity + "/" + totalQty;

                lblOrderWghtNo.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.RawName == txtRawMaterial.Text && item.RawType == txtType.Text && item.Code == drpOrderNo.Text && item.color == drpColor.Text && item.SubCom == txtPName.Text && item.SubComName == txtPSize.Text)?.OrderWghtNo.ToString() ?? "";

                if (totalQty != "")
                {
                    txtAvlQty.Text = (int.Parse(totalQty) - totalQuantity).ToString();
                }
            }
        }

        public void BindData(dynamic selectedCompanyList)
        {
            var selectedRows = selectedCompanyList.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                JobGivingWithoutDcRequest.Id = selectedCompanyList.GetRowCellValue(rowHandle, "Id");
                drpEmpCode.SelectedIndex = JobGivingWithoutDcRequest.EmployeePersonalList.FindIndex(x => x.Id == Convert.ToInt32(selectedCompanyList.GetRowCellValue(rowHandle, "EmployeeCode").ToString()));
                txtEmpName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "EmployeeName");
                txtComName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "CompanyName");
                txtCCom.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ClientCompany");
                txtClientName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ClientName");
                txtSCCom.Text = selectedCompanyList.GetRowCellValue(rowHandle, "SubClientCompany");
                var datete = selectedCompanyList.GetRowCellValue(rowHandle, "Date").ToString();
                ddDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                drpOrderNo.Text = JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.Id == Convert.ToInt32(selectedCompanyList.GetRowCellValue(rowHandle, "OrderNo").ToString()))?.Code.ToString() ?? "";
                datete = selectedCompanyList.GetRowCellValue(rowHandle, "OrderDate").ToString();
                ddODate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                txtCCode.Text = selectedCompanyList.GetRowCellValue(rowHandle, "CustomerCode");
                txtCCName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "CustomerName");
                drpMName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ModelName");
                drpMCode.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ModelCode");
                txtPName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ProductName");
                txtPSize.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ProductSize");
                drpColor.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Color");
                txtRawMaterial.Text = selectedCompanyList.GetRowCellValue(rowHandle, "RawMaterial");
                txtType.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Type");
                txtQuantity.Text = selectedCompanyList.GetRowCellValue(rowHandle, "QuantityPiece").ToString();
                txtWeight.Text = selectedCompanyList.GetRowCellValue(rowHandle, "WeightKg");
                txtAvlQty.Text = selectedCompanyList.GetRowCellValue(rowHandle, "AvlQty");
                txtShortage.Text = selectedCompanyList.GetRowCellValue(rowHandle, "AuthorFathername");
                btnNew.Enabled = false;
                btnUpdate.Enabled = true;
                btnEdit.Enabled = true;
            }
        }

        private void btnClear_Click(object sender = null, EventArgs e = null)
        {
            drpEmpCode.ResetText();
            txtEmpName.ResetText();
            txtComName.ResetText();
            txtCCom.ResetText();
            txtClientName.ResetText();
            txtSCCom.ResetText();
            ddDate.ResetText();
            drpOrderNo.ResetText();
            ddODate.ResetText();
            txtCCode.ResetText();
            txtCCName.ResetText();
            drpMName.ResetText();
            drpMCode.ResetText();
            txtPName.ResetText();
            txtPSize.ResetText();
            drpColor.ResetText();
            txtRawMaterial.ResetText();
            txtType.ResetText();
            txtQuantity.ResetText();
            txtWeight.ResetText();
            txtAvlQty.ResetText();
            txtShortage.ResetText();
            lblOrderQtyNo.ResetText();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void txtQuantity_EditValueChanged(object sender, EventArgs e)
        {
            var selectedItem = txtQuantity.Text;
            if (selectedItem != null && selectedItem != "")
            {
                var enteredQty = Convert.ToDecimal(txtQuantity.Text);
                decimal totalWt = Convert.ToDecimal(JobGivingWithoutDcRequest.OrderMasterList.FirstOrDefault(item => item.RawName == txtRawMaterial.Text && item.RawType == txtType.Text && item.Code == drpOrderNo.Text && item.color == drpColor.Text && item.SubCom == txtPName.Text && item.SubComName == txtPSize.Text)?.TotalWt);
                var total = enteredQty * totalWt;
                lblWeight.Text = total.ToString();
            }

            int a;
            int b;
            if (txtQuantity.Text != "" && txtAvlQty.Text != "")
            {
                if (int.TryParse(txtAvlQty.Text, out a) && int.TryParse(txtQuantity.Text, out b))
                {
                    int result = a - b;
                    lblAvlQty.Text = result.ToString();
                }
            }
        }

        private void txtWeight_EditValueChanged(object sender, EventArgs e)
        {
            decimal txtWeightValue;
            decimal lblWeightValue;

            if (decimal.TryParse(txtWeight.Text, out txtWeightValue) && decimal.TryParse(lblWeight.Text, out lblWeightValue))
            {
                decimal countDifferent = txtWeightValue - lblWeightValue;
                if (countDifferent >= 0)
                {
                    txtExcess.Text = countDifferent.ToString();
                    txtShortage.Text = string.Empty;
                }
                else
                {
                    txtExcess.Text = string.Empty;
                    txtShortage.Text = (countDifferent).ToString();
                }
            }
        }
        private void InitializeDataSource()
        {
            //FamilyGridView.Columns.Clear();
            DataTable dataTable = new DataTable();

            // Create columns and bind them to the object properties
            dataTable.Columns.Add("EmployeeCode", typeof(string));
            dataTable.Columns.Add("EmployeeName", typeof(string));
            dataTable.Columns.Add("CompanyName", typeof(string));
            dataTable.Columns.Add("Director", typeof(string));
            dataTable.Columns.Add("ClientCompany", typeof(string));
            dataTable.Columns.Add("ClientName", typeof(string));
            dataTable.Columns.Add("SubClientCompany", typeof(string));
            dataTable.Columns.Add("subContractor", typeof(string));
            dataTable.Columns.Add("OrderNo", typeof(string));
            dataTable.Columns.Add("Date", typeof(string));
            dataTable.Columns.Add("OrderDate", typeof(string));
            dataTable.Columns.Add("CustomerCode", typeof(string));
            dataTable.Columns.Add("CustomerName", typeof(string));
            dataTable.Columns.Add("ModelName", typeof(string));
            dataTable.Columns.Add("ModelCode", typeof(string));
            dataTable.Columns.Add("ProductName", typeof(string));
            dataTable.Columns.Add("ProductSize", typeof(string));
            dataTable.Columns.Add("RawMaterial", typeof(string));
            dataTable.Columns.Add("QuantityPiece", typeof(string));
            dataTable.Columns.Add("WeightKg", typeof(string));
            dataTable.Columns.Add("Excess", typeof(string));
            dataTable.Columns.Add("Color", typeof(string));
            dataTable.Columns.Add("Type", typeof(string));
            dataTable.Columns.Add("AvlQty", typeof(string));
            dataTable.Columns.Add("TotalQty", typeof(string));
            dataTable.Columns.Add("TotalWt", typeof(string));
            dataTable.Columns.Add("Shortage", typeof(string));
            gridControl1.DataSource = dataTable;
            gridView1.RefreshData();
            gridControl1.RefreshDataSource();
        }

        private void FrmJobGivingWithoutDcInfo_Load(object sender, EventArgs e)
        {
            // Scale our form to look like it did when we designed it.
            // This adjusts between the screen resolution of the design computer and the workstation.
            int ourScreenWidth = Screen.FromControl(this).WorkingArea.Width;
            int ourScreenHeight = Screen.FromControl(this).WorkingArea.Height;
            float scaleFactorWidth = ourScreenWidth / 1600f;
            float scaleFactorHeigth = ourScreenHeight / 900f;
            SizeF scaleFactor = new SizeF(scaleFactorWidth, scaleFactorHeigth);
            Scale(scaleFactor);

            // If you want to center the resized screen.
            CenterToScreen();
        }
    }
}
