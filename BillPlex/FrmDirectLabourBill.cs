using BusinessLayer;
using DevExpress.Data;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraPrinting;
using DevExpress.XtraReports.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmDirectLabourBill : DevExpress.XtraEditors.XtraForm
    {
        private DirectLabourBill DirectLabourBillRequest;
        private RpLabourBill LabourBill; // Declare the report variable at the class level
        public FrmDirectLabourBill()
        {
            InitializeComponent();
            DirectLabourBillRequest = new DirectLabourBill();

            DirectLabourBillRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;
            ddDate.DateTime = DateTime.Now;

            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>        {
                    { "MasterCompanyRequired", true },
                    {"ClientCompanyRequired",true},
                    {"SubClientCompanyRequired",true}
                };

            var dropdwonList = DirectLabourBillRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "MasterCompanyRequired")
                {
                    DirectLabourBillRequest.MasterCompanyList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "ClientCompanyRequired")
                {
                    DirectLabourBillRequest.ClientCompanyList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "SubClientCompanyRequired")
                {
                    DirectLabourBillRequest.SubClientList = (List<DropDownItemInfo>)item.Value;
                }
            }

            if (DirectLabourBillRequest.MasterCompanyList != null)
            {
                if (DirectLabourBillRequest.MasterCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectLabourBillRequest.MasterCompanyList)
                    {
                        drpMainCompany.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            if (DirectLabourBillRequest.ClientCompanyList != null)
            {
                if (DirectLabourBillRequest.ClientCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectLabourBillRequest.ClientCompanyList)
                    {
                        drpCCompany.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            if (DirectLabourBillRequest.SubClientList != null)
            {
                if (DirectLabourBillRequest.SubClientList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectLabourBillRequest.SubClientList)
                    {
                        drpSubClient.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }
        private void btn_Print_Click(object sender, EventArgs e)
        {
            //report rep = new report();
            //rep.RequestParameters = false;
            //MessageBox.Show("the 'DevExpress.XtraPrinting'Labrary is not fount");
            //return;
            //rep.ExportToPdf("Report.pdf");
            //System.Diagnostics.Process.Start("Report.pdf");

            //if (!gridControl1.IsPrintingAvailable)
            //{
            //MessageBox.Show("The 'DevExpress.XtraPrinting' library is not found", "Error");
            //return;
            //}

            //PrintableComponentLink link = new PrintableComponentLink(new PrintingSystem());
            //link.Component = gridControl1;

            //link.ShowPreview();

            // Open the Preview window.
            //gridControl1.ShowPrintPreview();

            if (LabourBill == null)
            {
                // Initialize the report if not already done
                LabourBill = new RpLabourBill(); // Replace with your actual report class
                LabourBill.DataSource = sqlDataSource1; // Replace with your actual data source
            }

            using (ReportPrintTool printTool = new ReportPrintTool(LabourBill))
            {
                printTool.ShowPreviewDialog();
            }
        }

        private void drpMainCompany_EditValueChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpMainCompany.SelectedItem;

            if (selectedItem != null)
            {
                txtDirector.Text = DirectLabourBillRequest.MasterCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }

        private void drpCCompany_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpCCompany.SelectedItem;

            if (selectedItem != null)
            {
                txtClientName.Text = DirectLabourBillRequest.ClientCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }

        private void drpSubClient_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpSubClient.SelectedItem;

            if (selectedItem != null)
            {
                txtSubClient.Text = DirectLabourBillRequest.SubClientList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }

        private void comboBoxEdit3_EditValueChanged(object sender, EventArgs e)
        {
            //DateTime fromDate = ddFrom.DateTime;
            //DateTime toDate = ddTo.DateTime;

            //// Get the GridView
            //GridView gridView = gridControl1.MainView as GridView;

            //// Clear any existing filters
            //gridView.ActiveFilter.Clear();

            //// Apply the date range filter
            //gridView.ActiveFilterString = $"[sqlDataSource1] >= #{fromDate.ToString("MM/dd/yyyy")}# AND [sqlDataSource1] <= #{toDate.ToString("MM/dd/yyyy")}#";
            DisplayFooterTotal();
        }

        private void FrmDirectLabourBill_Load(object sender, EventArgs e)
        {
            foreach (GridColumn column in gridView1.Columns)
            {
                drpSortBy.Properties.Items.Add(column.FieldName);
            }
        }

        private void drpOrderBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            // Get the selected sorting order from the ComboBox
            //string selectedSortingOrder = drpOrderBy.EditValue.ToString();

            //// Get the GridView
            //GridView gridView = gridView1;
            //GridView gridView = (GridView)gridControl1.MainView;

            //// Clear existing sorting settings
            //gridView.ClearSorting();

            // Determine the sort order
            //ColumnSortOrder sortOrder = drpOrderBy.EditValue.ToString() == "Ascending" ? ColumnSortOrder.Ascending : ColumnSortOrder.Descending;

            // Apply sorting to the grid
            //gridView.Columns["YourColumnName"].SortOrder = sortOrder;
        }

        private void radioGroup2_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (double.TryParse(txtGrandTotal.Text, out double inputValue))
            {
                double result = 0.0;

                if (radProduction.Text == "1")
                {
                    if (double.TryParse(txtIncentivePercent.Text, out double percentageValue))
                    {
                        result = (percentageValue / 100) * inputValue;
                    }
                }
                else if (radProduction.Text == "0" && !string.IsNullOrEmpty(txtIncentivePercent.Text))
                {
                    result = Convert.ToDouble(txtIncentivePercent.Text) + inputValue;
                }

                txtProductionIncentive.Text = result.ToString("0.00");
                /*txtFinalTotal.Text = txtGrandTotal.Text + txtProductionIncentive.Text + txtPFText.Text + TxtTotalESI.Text + txtTotalBouns.Text;
                var a = txtGrandTotal.Text + txtProductionIncentive.Text + txtPFText.Text + TxtTotalESI.Text + txtTotalBouns.Text;
                txtNetAmount.Text = a - txtAdvance.Text;*/
            }
        }

        private void radPF_SelectedIndexChanged(object sender, EventArgs e)
        {
            if (double.TryParse(txtProductionIncentive.Text, out double inputValue))
            {
                double result = 0.0;

                if (radProduction.Text == "1")
                {
                    if (double.TryParse(txtpf.Text, out double percentageValue))
                    {
                        result = (percentageValue / 100) * inputValue;
                    }
                }
                else if (radProduction.Text == "0" && !string.IsNullOrEmpty(txtpf.Text))
                {
                    result = Convert.ToDouble(txtpf.Text) + inputValue;
                }

                txtPFText.Text = result.ToString("0.00");
            }
        }

        private void radESI_EditValueChanged(object sender, EventArgs e)
        {
            if (double.TryParse(txtPFText.Text, out double inputValue))
            {
                double result = 0.0;

                if (radProduction.Text == "1")
                {
                    if (double.TryParse(txtESI.Text, out double percentageValue))
                    {
                        result = (percentageValue / 100) * inputValue;
                    }
                }
                else if (radProduction.Text == "0" && !string.IsNullOrEmpty(txtESI.Text))
                {
                    result = Convert.ToDouble(txtESI.Text) + inputValue;
                }

                TxtTotalESI.Text = result.ToString("0.00");
            }
        }

        private void radBonus_EditValueChanged(object sender, EventArgs e)
        {
            if (double.TryParse(TxtTotalESI.Text, out double inputValue))
            {
                double result = 0.0;

                if (radProduction.Text == "1")
                {
                    if (double.TryParse(txtBonus.Text, out double percentageValue))
                    {
                        result = (percentageValue / 100) * inputValue;
                    }
                }
                else if (radProduction.Text == "0" && !string.IsNullOrEmpty(txtBonus.Text))
                {
                    result = Convert.ToDouble(txtBonus.Text) + inputValue;
                }

                txtTotalBouns.Text = result.ToString("0.00");
            }
        }

        private void drpSortBy_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedColumnName = drpSortBy.SelectedItem.ToString();
            GridColumn selectedColumn = gridView1.Columns[selectedColumnName];

            if (selectedColumn != null)
            {
                // Move the selected column to the first position in the column collection
                selectedColumn.VisibleIndex = 0;
            }
        }
        // to get the footer values 
        private void DisplayFooterTotal()
        {
            GridView view = gridView1;

            // Access the summary item for the desired column
            GridColumn column1 = view.Columns["TotalAmt"]; // Replace with your actual column name
            GridColumnSummaryItem summaryItem = column1.SummaryItem as GridColumnSummaryItem;

            if (summaryItem != null && summaryItem.SummaryValue != null)
            {
                double totalColumn1 = Convert.ToDouble(summaryItem.SummaryValue);
                txtTotal.Text = totalColumn1.ToString(); // Update TextBox with total value of Column1
                txtSubTotal1.Text = totalColumn1.ToString(); // Update TextBox with total value of Column1
            }
            else
            {
                txtTotal.Text = "0.00"; // Handle the case where the summary value is not available
            }
        }

        private void txtSubTotal1_EditValueChanged(object sender, EventArgs e)
        {
            //decimal total = 0;
            //decimal deductionTotal = 0;

            //if (txtConveyance.Text != "" && txtConveyance.Text != "0")
            //{
            //    total = Convert.ToDecimal(txtSubTotal1.Text) + Convert.ToDecimal(txtConveyance.Text);
            //    deductionTotal = Convert.ToDecimal(txtSubTotal1.Text) + Convert.ToDecimal(txtConveyance.Text);
            //}

            //if (txtIncentives.Text != "" && txtSubTotal2.Text != "0")
            //{
            //    deductionTotal = deductionTotal + Convert.ToDecimal(txtSubTotal2.Text);
            //    total = total + Convert.ToDecimal(txtSubTotal2.Text);
            //}

            //if (txtSupVisorTotal.Text != "" && txtSupVisorTotal.Text != "0")
            //{
            //    total = total + Convert.ToDecimal(txtSupVisorTotal.Text);
            //}

            //if (txtGrandTotal.Text != "" && txtGrandTotal.Text != "0")
            //{
            //    total = total + Convert.ToDecimal(txtGrandTotal.Text);
            //}

            //txtFinalTotal.Text = deductionTotal.ToString();
            //total = deductionTotal - Convert.ToDecimal(txtAdvance.Text);
            //txtNetAmount.Text = total.ToString();
        }
    }
}