using BusinessLayer;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmDirectJobReceivedWithoutGivingInfo : DevExpress.XtraEditors.XtraForm
    {
        private DirectJobReceivedWithoutGiving DirectJobReceivedWithoutGivingRequest;

        private List<dynamic> DirectJobReceivedWithoutGivingSource;

        private GridControl gridControl;

        private DataTable dt;
        public FrmDirectJobReceivedWithoutGivingInfo()
        {
            InitializeComponent();
            InitializeDataSource();

            DirectJobReceivedWithoutGivingRequest = new DirectJobReceivedWithoutGiving();

            DirectJobReceivedWithoutGivingRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;
            DirectJobReceivedWithoutGivingRequest.DirectJobReceivedWithoutGivingList = new List<DirectJobReceivedWithoutGiving>();

            DirectJobReceivedWithoutGivingSource = new List<dynamic>();

            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>        {
                    { "ColorMasterRequired", true },
                    {"EmployeePersonalRequired",true},
                    {"FinishingProductRequired",true}
                };

            var dropdwonList = DirectJobReceivedWithoutGivingRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "ColorMasterRequired")
                {
                    DirectJobReceivedWithoutGivingRequest.ColorMasterList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "EmployeePersonalRequired")
                {
                    DirectJobReceivedWithoutGivingRequest.EmployeePersonalList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "FinishingProductRequired")
                {
                    DirectJobReceivedWithoutGivingRequest.FinishingProductList = (List<DropDownItemInfo>)item.Value;
                }
            }

            if (DirectJobReceivedWithoutGivingRequest.ColorMasterList != null)
            {
                if (DirectJobReceivedWithoutGivingRequest.ColorMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectJobReceivedWithoutGivingRequest.ColorMasterList)
                    {
                        drpColor.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }

            }
            if (DirectJobReceivedWithoutGivingRequest.EmployeePersonalList != null)
            {
                if (DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectJobReceivedWithoutGivingRequest.EmployeePersonalList)
                    {
                        drpEmpCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                    }
                }
            }
            if (DirectJobReceivedWithoutGivingRequest.FinishingProductList != null)
            {
                if (DirectJobReceivedWithoutGivingRequest.FinishingProductList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectJobReceivedWithoutGivingRequest.FinishingProductList)
                    {
                        drpProductModel.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
                string selectedMasterItem = drpEmpCode.Text;

                if (selectedMasterItem != null)
                {
                    DirectJobReceivedWithoutGivingRequest.EmployeeCode = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedMasterItem.ToString())?.Id ?? -1;
                }
                DirectJobReceivedWithoutGivingRequest.EmployeeName = txtEmpName.Text;
                DirectJobReceivedWithoutGivingRequest.CompanyName = txtComName.Text;
                DirectJobReceivedWithoutGivingRequest.Director = txtDirector.Text;
                DirectJobReceivedWithoutGivingRequest.ClientComapny = txtClientCompany.Text;
                DirectJobReceivedWithoutGivingRequest.ClientName = txtClientName.Text;
                DirectJobReceivedWithoutGivingRequest.SubClientComapny = txtSubClient.Text;
                DirectJobReceivedWithoutGivingRequest.SubClientName = txtSubContractor.Text;
                DirectJobReceivedWithoutGivingRequest.ProductModel = drpProductModel.Text;
                DirectJobReceivedWithoutGivingRequest.ProductCode = drpProductCode.Text;
                DirectJobReceivedWithoutGivingRequest.ProductName = txtProductName.Text;
                DirectJobReceivedWithoutGivingRequest.Wages = txtWages.Text;
                DirectJobReceivedWithoutGivingRequest.ProSize = txtSize.Text;
                DirectJobReceivedWithoutGivingRequest.Color = drpColor.Text;
                DirectJobReceivedWithoutGivingRequest.Quantity = txtQuantity.Text;
                DirectJobReceivedWithoutGivingRequest.Weight = txtWeight.Text;
                DirectJobReceivedWithoutGivingRequest.IncentiveApplicable = drpIncentiveApp.Text;
                DirectJobReceivedWithoutGivingRequest.BDays = txtBeforeDays.Text;
                DirectJobReceivedWithoutGivingRequest.ADays = txtAfterDays.Text;
                DirectJobReceivedWithoutGivingRequest.Deduction = txtDeducation.Text;
                DirectJobReceivedWithoutGivingRequest.Total = txtTotal.Text;
                DirectJobReceivedWithoutGivingRequest.Conveyance = txtConveyance.Text;
                DirectJobReceivedWithoutGivingRequest.Incentive = txtIncentive.Text;
                DirectJobReceivedWithoutGivingRequest.NetAmt = txtNetAmt.Text;
                DirectJobReceivedWithoutGivingRequest.ReceivingDate = ddReceivingDate.Text;
                DirectJobReceivedWithoutGivingRequest.Update();

                if (DirectJobReceivedWithoutGivingRequest.Result.Status == ResultStatus.Success)
                {
                    XtraMessageBox.Show(DirectJobReceivedWithoutGivingRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);

                    if (DirectJobReceivedWithoutGivingRequest.DirectJobReceivedWithoutGivingList.Count() > 0)
                    {
                        foreach (var item in DirectJobReceivedWithoutGivingRequest.DirectJobReceivedWithoutGivingList)
                        {
                            DataTable dataTable = gridControl1.DataSource as DataTable;

                            DataRow newRow = dataTable.NewRow();
                            newRow["EmployeeCode"] = item.EmployeeCode;
                            newRow["EmployeeName"] = item.EmployeeName;
                            newRow["CompanyName"] = item.CompanyName;
                            newRow["DirectorName"] = item.Director;
                            newRow["ClientCompany"] = item.ClientComapny;
                            newRow["ClientName"] = item.ClientName;
                            newRow["SubClientCompany"] = item.SubClientComapny;
                            newRow["SubClientName"] = item.SubClientName;
                            newRow["ProductModel"] = item.ProductModel;
                            newRow["ProductCode"] = item.ProductCode;
                            newRow["ProductName"] = item.ProductName;
                            newRow["Wages"] = item.Wages;
                            newRow["Prosize"] = item.ProSize;
                            newRow["color"] = item.Color;
                            newRow["Quantity"] = item.Quantity;
                            newRow["Weight"] = item.Weight;
                            newRow["BDays"] = item.BDays;
                            newRow["ADays"] = item.ADays;
                            newRow["Deduction"] = item.Deduction;
                            newRow["Total"] = item.Total;
                            newRow["Conveyance"] = item.Conveyance;
                            newRow["Incentive"] = item.Incentive;
                            newRow["NetAmt"] = item.NetAmt;
                            newRow["ReceivingDate"] = item.ReceivingDate;

                            // Add the new DataRow to the DataTable
                            dataTable.Rows.Add(newRow);
                        }
                        //this.Close();

                        //FrmDirectJobReceivedWithoutGivingProfile form = Application.OpenForms.OfType<FrmDirectJobReceivedWithoutGivingProfile>().FirstOrDefault();

                        //Form myForm = Application.OpenForms["FrmDirectJobReceivedWithoutGivingProfile"];
                        //if (myForm != null)
                        //{
                        //    form.ReloadSqlDataSource();
                        //}
                        gridView1.RefreshData();
                        gridControl1.RefreshDataSource();
                    }
                    else
                    {
                        XtraMessageBox.Show(DirectJobReceivedWithoutGivingRequest.Result.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);

                    }
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void drpEmpCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpEmpCode.SelectedItem;
            if (selectedItem != null)
            {
                txtEmpName.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.Name ?? "";
                txtComName.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.proModel ?? "";
                txtDirector.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.AuthorName ?? "";
                txtClientCompany.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.productId ?? "";
                txtClientName.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.RawMaterial ?? "";
                txtSubClient.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.SubCom ?? "";
                txtSubContractor.Text = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FirstOrDefault(item => item.Code == selectedItem.ToString())?.SubComName ?? "";
            }
        }

        private void drpProductModel_SelectedIndexChanged(object sender, EventArgs e)
        {
            var selectItem = drpProductModel.Text;
            if (DirectJobReceivedWithoutGivingRequest.FinishingProductList != null && selectItem != "")
            {
                if (DirectJobReceivedWithoutGivingRequest.FinishingProductList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DirectJobReceivedWithoutGivingRequest.FinishingProductList)
                    {
                        if (item.Name == selectItem)
                        {
                            drpProductCode.Properties.Items.Add(new ImageComboBoxItem(item.AuthorName));
                        }
                    }
                }
            }
        }
        private void drpProductCode_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = drpProductCode.Text;
            if (selectedItem != null)
            {
                txtProductName.Text = DirectJobReceivedWithoutGivingRequest.FinishingProductList.FirstOrDefault(item => item.AuthorName == selectedItem.ToString() && item.Name == drpProductModel.Text.ToString())?.Code ?? "";
                txtWages.Text = DirectJobReceivedWithoutGivingRequest.FinishingProductList.FirstOrDefault(item => item.AuthorName == selectedItem.ToString() && item.Name == drpProductModel.Text.ToString())?.productId ?? "";
                txtSize.Text = DirectJobReceivedWithoutGivingRequest.FinishingProductList.FirstOrDefault(item => item.AuthorName == selectedItem.ToString() && item.Name == drpProductModel.Text.ToString())?.proModel ?? "";
            }
        }

        public void BindData(dynamic selectedCompanyList)
        {
            var selectedRows = selectedCompanyList.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                DirectJobReceivedWithoutGivingRequest.Id = selectedCompanyList.GetRowCellValue(rowHandle, "Id");
                drpEmpCode.SelectedIndex = DirectJobReceivedWithoutGivingRequest.EmployeePersonalList.FindIndex(x => x.Id == Convert.ToInt64(selectedCompanyList.GetRowCellValue(rowHandle, "EmpId").ToString()));
                txtEmpName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "EmployeeName");
                txtComName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "CompanyName");
                txtDirector.Text = selectedCompanyList.GetRowCellValue(rowHandle, "DirectorName");
                txtClientCompany.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ClientCompany");
                txtClientName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ClientName");
                txtSubClient.Text = selectedCompanyList.GetRowCellValue(rowHandle, "SubClientCompany");
                txtSubContractor.Text = selectedCompanyList.GetRowCellValue(rowHandle, "SubClientName");
                drpProductModel.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ProductModel");
                drpProductCode.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ProductCode");
                txtProductName.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ProductName");
                txtWages.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Wages");
                txtSize.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Prosize");
                drpColor.Text = selectedCompanyList.GetRowCellValue(rowHandle, "color");
                txtQuantity.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Quantity");
                txtWeight.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Weight");
                drpIncentiveApp.Text = selectedCompanyList.GetRowCellValue(rowHandle, "IncentiveApplicable");
                txtBeforeDays.Text = selectedCompanyList.GetRowCellValue(rowHandle, "BDays");
                txtAfterDays.Text = selectedCompanyList.GetRowCellValue(rowHandle, "ADays");
                txtDeducation.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Deduction");
                txtTotal.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Total");
                txtConveyance.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Conveyance");
                txtIncentive.Text = selectedCompanyList.GetRowCellValue(rowHandle, "Incentive");
                txtNetAmt.Text = selectedCompanyList.GetRowCellValue(rowHandle, "NetAmt");

                btnAdd.Enabled = false;
                btnNew.Enabled = false;
                btnUpdate.Enabled = true;
                btnEdit.Enabled = true;
            }
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            drpEmpCode.ResetText();
            txtEmpName.ResetText();
            txtComName.ResetText();
            txtDirector.ResetText();
            txtClientCompany.ResetText();
            txtClientName.ResetText();
            txtSubClient.ResetText();
            txtSubContractor.ResetText();
            drpProductModel.ResetText();
            drpProductCode.ResetText();
            txtProductName.ResetText();
            txtWages.ResetText();
            txtSize.ResetText();
            drpColor.ResetText();
            txtQuantity.ResetText();
            txtWeight.ResetText();
            drpIncentiveApp.ResetText();
            txtBeforeDays.ResetText();
            txtAfterDays.ResetText();
            txtDeducation.ResetText();
            txtTotal.ResetText();
            txtConveyance.ResetText();
            txtIncentive.ResetText();
            txtNetAmt.ResetText();
        }

        private void btnExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void txtDeducation_EditValueChanged(object sender, EventArgs e)
        {
            int a;
            int b;
            if (txtTotal.Text != "" && txtDeducation.Text != "")
            {
                if (int.TryParse(txtTotal.Text, out a) && int.TryParse(txtDeducation.Text, out b))
                {
                    int result = a - b;
                    txtTotal.Text = result.ToString();
                }
            }
            else if (string.IsNullOrEmpty(txtDeducation.Text))
            {
                txtTotal.Text = string.Empty;
            }
        }

        private void txtQuantity_EditValueChanged(object sender = null, EventArgs e = null)
        {

            int total = 0;

            if (txtWages.Text != "" && (txtQuantity.Text != "" && txtQuantity.Text != "0"))
            {
                total = (Convert.ToInt32(txtWages.Text) * Convert.ToInt32(txtQuantity.Text));
            }

            if (txtDeducation.Text != "" && txtDeducation.Text != "0")
            {
                total = total - Convert.ToInt32(txtDeducation.Text);
            }
            
            if (txtConveyance.Text != "" && txtConveyance.Text != "0")
            {
                total = total + Convert.ToInt32(txtConveyance.Text);
            }
            
            if (txtIncentive.Text != "" && txtIncentive.Text != "0")
            {
                total = total + Convert.ToInt32(txtIncentive.Text);
            }

            txtTotal.Text = total.ToString();
            txtNetAmt.Text = total.ToString();
        }

        private void InitializeDataSource()
        {
            //FamilyGridView.Columns.Clear();
            DataTable dataTable = new DataTable();

            // Create columns and bind them to the object properties
            dataTable.Columns.Add("EmployeeCode", typeof(string));
            dataTable.Columns.Add("EmployeeName", typeof(string));
            dataTable.Columns.Add("CompanyName", typeof(string));
            dataTable.Columns.Add("DirectorName", typeof(string));
            dataTable.Columns.Add("ClientCompany", typeof(string));
            dataTable.Columns.Add("ClientName", typeof(string));
            dataTable.Columns.Add("SubClientCompany", typeof(string));
            dataTable.Columns.Add("SubClientName", typeof(string));
            dataTable.Columns.Add("ProductModel", typeof(string));
            dataTable.Columns.Add("ProductCode", typeof(string));
            dataTable.Columns.Add("ProductName", typeof(string));
            dataTable.Columns.Add("Wages", typeof(string));
            dataTable.Columns.Add("Prosize", typeof(string));
            dataTable.Columns.Add("color", typeof(string));
            dataTable.Columns.Add("Quantity", typeof(string));
            dataTable.Columns.Add("Weight", typeof(string));
            dataTable.Columns.Add("BDays", typeof(string));
            dataTable.Columns.Add("ADays", typeof(string));
            dataTable.Columns.Add("Deduction", typeof(string));
            dataTable.Columns.Add("Total", typeof(string));
            dataTable.Columns.Add("Conveyance", typeof(string));
            dataTable.Columns.Add("Incentive", typeof(string));
            dataTable.Columns.Add("NetAmt", typeof(string));
            dataTable.Columns.Add("ReceivingDate", typeof(string));
            gridControl1.DataSource = dataTable;
            gridView1.RefreshData();
            gridControl1.RefreshDataSource();
        }
    }
}