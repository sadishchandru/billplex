using BusinessLayer;
using DevExpress.Data;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using DevExpress.XtraGrid;
using DevExpress.XtraGrid.Columns;
using DevExpress.XtraGrid.Views.Grid;
using DevExpress.XtraPrinting;
using DevExpress.XtraReports.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmMainCompanyReport : DevExpress.XtraEditors.XtraForm
    {
        private MainCompanyReport MainCompanyReportRequest;
        public FrmMainCompanyReport()
        {
            InitializeComponent();
            MainCompanyReportRequest = new MainCompanyReport();

            MainCompanyReportRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;
            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>        {
                    { "MasterCompanyRequired", true }
                };

            var dropdwonList = MainCompanyReportRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "MasterCompanyRequired")
                {
                    MainCompanyReportRequest.MasterCompanyList = (List<DropDownItemInfo>)item.Value;
                }
            }

            if (MainCompanyReportRequest.MasterCompanyList != null)
            {
                if (MainCompanyReportRequest.MasterCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in MainCompanyReportRequest.MasterCompanyList)
                    {
                        drpMainCompany.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void drpMainCompany_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpMainCompany.SelectedItem;

            if (selectedItem != null)
            {
                txtDirector.Text = MainCompanyReportRequest.MasterCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }

        private void FrmMainCompanyReport_Load(object sender, EventArgs e)
        {
            foreach (GridColumn column in gridView1.Columns)
            {
                drpSortby.Properties.Items.Add(column.FieldName);
            }
        }

        private void ddTo_EditValueChanged(object sender, EventArgs e)
        {
            MainCompanyReportRequest = new MainCompanyReport();
            try
            {
                MainCompanyReportRequest.From = ddFrom.Text;
                MainCompanyReportRequest.TO = ddTo.Text;
                MainCompanyReportRequest.MainCompany = drpMainCompany.Text;
                MainCompanyReportRequest.DirectBillReport();
                if (MainCompanyReportRequest.MasterCompanyWagesList.Count() > 0)
                {
                    InitializeDataSource();

                    foreach (var item in MainCompanyReportRequest.MasterCompanyWagesList)
                    {
                        DataTable dataTable = (DataTable)gridControl1.DataSource;
                        DataRow newRow = dataTable.NewRow();
                        newRow["EmployeeCode"] = item.EmployeeCode;
                        newRow["EmployeeName"] = item.EmployeeName;
                        newRow["EJoiningDate"] = item.EJoiningDate;
                        newRow["PFNo"] = item.PFNo;
                        newRow["ESINo"] = item.ESINo;
                        newRow["CompanyName"] = item.CompanyName;
                        newRow["subContractor"] = item.subContractor;
                        newRow["OrderNo"] = item.OrderNo;
                        newRow["ModelName"] = item.ModelName;
                        newRow["ReceivingDate"] = item.ReceivingDate;
                        newRow["QuantityPiece"] = item.QuantityPiece;
                        newRow["Wages"] = item.Wages;
                        newRow["Deduction"] = item.Deduction;
                        newRow["Conveyance"] = item.Conveyance;
                        newRow["Incentive"] = item.Incentive;
                        newRow["NetAmount"] = item.NetAmt;
                        dataTable.Rows.Add(newRow);
                        gridControl1.RefreshDataSource();
                    }
                    // Refresh the grid to display the new row
                    gridView1.RefreshData();
                    gridControl1.RefreshDataSource();
                }
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
        private void InitializeDataSource()
        {
            DataTable dataTable = new DataTable();
            // Create columns and bind them to the object properties
            dataTable.Columns.Add("EmployeeCode", typeof(string));
            dataTable.Columns.Add("EmployeeName", typeof(string));
            dataTable.Columns.Add("EJoiningDate", typeof(string));
            dataTable.Columns.Add("PFNo", typeof(string));
            dataTable.Columns.Add("ESINo", typeof(string));
            dataTable.Columns.Add("CompanyName", typeof(string));
            dataTable.Columns.Add("subContractor", typeof(string));
            dataTable.Columns.Add("ModelName", typeof(string));
            dataTable.Columns.Add("ReceivingDate", typeof(string));
            dataTable.Columns.Add("QuantityPiece", typeof(string));
            dataTable.Columns.Add("Wages", typeof(string));
            dataTable.Columns.Add("Deduction", typeof(string));
            dataTable.Columns.Add("Conveyance", typeof(string));
            dataTable.Columns.Add("Incentive", typeof(string));
            dataTable.Columns.Add("NetAmount", typeof(string));

            gridControl1.DataSource = dataTable;
            gridView1.RefreshData();
            gridControl1.RefreshDataSource();
        }
    }
}