using DevExpress.XtraEditors;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Configuration;
using BusinessLayer;
using System.Collections;

namespace BillPlex
{
    public partial class FrmSizeMaster : DevExpress.XtraEditors.XtraForm
    {
        private SizeMaster sizeMasterRequest;

        private List<string> SizeList;
        public FrmSizeMaster()
        {
            InitializeComponent();
            sizeMasterRequest = new SizeMaster();

            SizeList = new List<string>();

            btnAdd.Enabled = true;
            btEdit.Enabled = false;
            btUpdate.Enabled = false;

            sizeMasterRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;
            sizeMasterRequest.Result = new ResultDetail();
            labelAvailable.Visible = false;
            LabelExceed.Visible = false;

            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>        {
                    { "SizeMasterRequired", true }
                };

            var dropdwonList = sizeMasterRequest.GetDropdownCollections(dropDownList);

            foreach (DictionaryEntry item in dropdwonList)
            {
                if (item.Key == "SizeMasterRequired")
                {
                    sizeMasterRequest.SizeList = (List<DropDownItemInfo>)item.Value;
                }
            }
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously.
            sqlDataSource1.FillAsync();
        }
        public void ReloadSqlDataSource()
        {
            sqlDataSource1.FillAsync();
            SizeMasterGrid.RefreshData();

        }

        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
                if (txtSName.Text != string.Empty)
                {
                    if ((sizeMasterRequest.Id != 0 || labelAvailable.Visible == true) && LabelExceed.Visible == false)
                    {
                        sizeMasterRequest.SizeName = txtSName.Text;
                        sizeMasterRequest.Update();
                        if (sizeMasterRequest.Result.Status == ResultStatus.Success)
                        {
                            XtraMessageBox.Show(sizeMasterRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            ReloadSqlDataSource();
                            btnAdd.Enabled = true;
                            btEdit.Enabled = false;
                            btUpdate.Enabled = false;
                            btClear_Click();
                        }
                        else
                        {
                            XtraMessageBox.Show(sizeMasterRequest.Result.Message, "Warning", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        }
                    }
                    else
                    {
                        XtraMessageBox.Show("Please check Size", "Alert", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    }
                }
                else
                {
                    XtraMessageBox.Show("Please Enter Manditory field", "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);

                }

            }

            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void btClear_Click(object sender = null, EventArgs e = null)
        {
            sizeMasterRequest.Id = 0;
            txtSName.ResetText();
        }

        private void btDelete_Click(object sender, EventArgs e)
        {
            var selectedRows = SizeMasterGrid.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                var ID = SizeMasterGrid.GetRowCellValue(rowHandle, "Id");

                sizeMasterRequest.Id = (Int32)ID;
            }

            sizeMasterRequest.Delete();

            if (sizeMasterRequest.Result.Status == ResultStatus.Success)
            {
                XtraMessageBox.Show(sizeMasterRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                ReloadSqlDataSource();
            }
        }

        private void btEdit_Click(object sender, EventArgs e)
        {
            try
            {
                var selectedRows = SizeMasterGrid.GetSelectedRows();

                foreach (var rowHandle in selectedRows)
                {
                    sizeMasterRequest.Id = (Int32)SizeMasterGrid.GetRowCellValue(rowHandle, "Id");
                    txtSName.Text = SizeMasterGrid.GetRowCellValue(rowHandle, "Sizename").ToString();

                }
                btnAdd.Enabled = true;
                btEdit.Enabled = false;
                btDelete.Enabled = true;
                btUpdate.Enabled = true;
                labelAvailable.Visible = false;
                LabelExceed.Visible = false;
            }
            catch (Exception ex)
            {
                XtraMessageBox.Show(ex.Message, "Alert", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }

        private void btExit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void txtSName_EditValueChanged(object sender, EventArgs e)
        {
            if (txtSName.Text != string.Empty)
            {
                if (sizeMasterRequest.SizeList != null)
                {

                    var Size = sizeMasterRequest.SizeList.FirstOrDefault(obj => obj.Name.ToUpper() == txtSName.Text.ToUpper().ToString() && obj.Id != sizeMasterRequest.Id);

                    if (Size != null)
                    {
                        labelAvailable.Visible = false;
                        LabelExceed.Visible = true;
                    }
                    else
                    {
                        labelAvailable.Visible = true;
                        LabelExceed.Visible = false;
                    }
                }
                else
                {
                    labelAvailable.Visible = true;
                    LabelExceed.Visible = false;
                }

            }
            else
            {
                labelAvailable.Visible = false;
                LabelExceed.Visible = false;
            }
        }
    }
}