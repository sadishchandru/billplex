using BusinessLayer;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.Controls;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace BillPlex
{
    public partial class FrmDeliveryChallanInfo : DevExpress.XtraEditors.XtraForm
    {
        private DeliveryChallanInfro DeliveryChallanRequest;
        public FrmDeliveryChallanInfo()
        {
            InitializeComponent();
            DeliveryChallanRequest = new DeliveryChallanInfro();

            DeliveryChallanRequest.ConnectionString = ConfigurationManager.ConnectionStrings["BillPlex"].ConnectionString;

            btnAdd.Enabled = true;
            btnEdit.Enabled = false;
            btnUpdate.Enabled = false;

            /////////////////////
            //   dropdownvalidate();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            //sqlDataSource1.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();

            Dictionary<string, bool> dropDownList = new Dictionary<string, bool>
            {

                    { "MasterCompanyRequired", true },
                    { "ClientCompanyRequired", true },
                    { "SUbClientCompanyRequired", true },
                    { "ProductMasterRequired", true },
                    { "CustomerMasterRequired", true },
                    { "ColorMasterRequired", true },
                    { "OrderMasterRequired", true },
                    { "IncentiveMasterRequired", true }
                };
            var dropdownList = DeliveryChallanRequest.GetDropdownCollections(dropDownList);


            foreach (DictionaryEntry item in dropdownList)
            {

                if (item.Key == "MasterCompanyRequired")
                {
                    DeliveryChallanRequest.MasterCompanyList = (List<DropDownItemInfo>)item.Value;
                }


                if (item.Key == "ClientCompanyRequired")
                {
                    DeliveryChallanRequest.ClientCompanyList = (List<DropDownItemInfo>)item.Value;
                }


                if (item.Key == "SUbClientCompanyRequired")
                {
                    DeliveryChallanRequest.SUbClientCompanyList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "ProductMasterRequired")
                {
                    DeliveryChallanRequest.ProductMasterList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "CustomerMasterRequired")
                {
                    DeliveryChallanRequest.CustomerMasterList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "ColorMasterRequired")
                {
                    DeliveryChallanRequest.ColorMasterList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "OrderMasterRequired")
                {
                    DeliveryChallanRequest.OrderMasterList = (List<DropDownItemInfo>)item.Value;
                }

                if (item.Key == "IncentiveMasterRequired")
                {
                    DeliveryChallanRequest.IncentiveMasterList = (List<DropDownItemInfo>)item.Value;
                }
            }

            //////////////////////////


            if (DeliveryChallanRequest.MasterCompanyList != null)
            {
                if (DeliveryChallanRequest.MasterCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.MasterCompanyList)
                    {
                        drpCName.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }


            if (DeliveryChallanRequest.ClientCompanyList != null)
            {
                if (DeliveryChallanRequest.ClientCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.ClientCompanyList)
                    {
                        drpCCom.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }


            if (DeliveryChallanRequest.SUbClientCompanyList != null)
            {
                if (DeliveryChallanRequest.SUbClientCompanyList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.SUbClientCompanyList)
                    {
                        drpSCCom.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }

            if (DeliveryChallanRequest.ProductMasterList != null)
            {
                if (DeliveryChallanRequest.ProductMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.ProductMasterList)
                    {
                        drpPSize.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }

            if (DeliveryChallanRequest.CustomerMasterList != null)
            {
                if (DeliveryChallanRequest.CustomerMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.CustomerMasterList)
                    {
                        drpCCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                    }
                }
                if (DeliveryChallanRequest.CustomerMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.CustomerMasterList)
                    {
                        drpComName.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }


            if (DeliveryChallanRequest.ColorMasterList != null)
            {
                if (DeliveryChallanRequest.ColorMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.ColorMasterList)
                    {
                        drpColor.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }


            if (DeliveryChallanRequest.OrderMasterList != null)
            {
                if (DeliveryChallanRequest.OrderMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.OrderMasterList)
                    {
                        drpOrderCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                    }
                }
            }

            if (DeliveryChallanRequest.IncentiveMasterList != null)
            {
                if (DeliveryChallanRequest.IncentiveMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.IncentiveMasterList)
                    {
                        drpMCode.Properties.Items.Add(new ImageComboBoxItem(item.Code));
                    }
                }

                if (DeliveryChallanRequest.IncentiveMasterList.Count() > 0)
                {
                    foreach (DropDownItemInfo item in DeliveryChallanRequest.IncentiveMasterList)
                    {
                        drpMName.Properties.Items.Add(new ImageComboBoxItem(item.Name));
                    }
                }
            }
          
        }
        public void ReloadSqlDataSource()
        {
            sqlDataSource1.FillAsync();
            gridView1.RefreshData();

        }

        private void InsertBankInfoBtn_Click(object sender, EventArgs e)
        {
            FrmClientCompanyBankInfo Cs = new FrmClientCompanyBankInfo();
            Cs.ShowDialog();
        }
        private void btnAdd_Click(object sender, EventArgs e)
        {
            try
            {
                if (drpCName.Text != string.Empty && drpCCom.Text != string.Empty && drpSCCom.Text != string.Empty && txtDirector.Text != "" && txtContractor.Text != "" && drpSCCom.Text != "" &&
                   (drpCName.Text != string.Empty && drpCCom.Text != "Select" && drpSCCom.Text != "Select") && (drpCName.Text != string.Empty && drpCCom.Text != string.Empty && drpSCCom.Text != "Select"))
                {
                    string selectedMasterItem = (string)drpCName.SelectedItem;
                    if (selectedMasterItem != null)
                    {
                        DeliveryChallanRequest.CompanyMasterId = DeliveryChallanRequest.MasterCompanyList.FirstOrDefault(item => item.Name == selectedMasterItem.ToString())?.Id ?? -1;
                    }

                    string selectedClientMaster = (String)drpCCom.SelectedItem;
                    if (selectedClientMaster != null)
                    {
                        DeliveryChallanRequest.ClientCompanyId = DeliveryChallanRequest.ClientCompanyList.FirstOrDefault(item => item.Name == selectedClientMaster.ToString())?.Id ?? -1;
                    }
                    string selectedSubclientCompanyId = (String)drpSCCom.SelectedItem;
                    if (selectedSubclientCompanyId != null)
                    {
                        DeliveryChallanRequest.SubclientCompanyId = DeliveryChallanRequest.SUbClientCompanyList.FirstOrDefault(item => item.Name == selectedSubclientCompanyId.ToString())?.Id ?? -1;
                    }
                  string selectedOrderMaster = (string)drpOrderCode.SelectedItem;
                  if (selectedOrderMaster != null)
                  {
                      DeliveryChallanRequest.OrderNo = DeliveryChallanRequest.OrderMasterList.FirstOrDefault(item => item.Code == selectedOrderMaster.ToString())?.Id ?? -1;
                      
                  }

                string selectedColorMaster = (string)drpColor.SelectedItem;
                if (selectedColorMaster != null)
                {
                    DeliveryChallanRequest.ColourName = DeliveryChallanRequest.ColorMasterList.FirstOrDefault(item => item.Name == selectedColorMaster.ToString())?.Id ?? -1;
                }
                  
                    DeliveryChallanRequest.Director = txtDirector.Text;
                    DeliveryChallanRequest.Subcontractor = txtSCont.Text;
                    DeliveryChallanRequest.Contractor = txtContractor.Text;
                    DeliveryChallanRequest.CustomerCode = drpCCode.Text;
                    DeliveryChallanRequest.CustomerName = drpComName.Text.ToString();
                  //  DeliveryChallanRequest.OrderNo = drpOrderCode.Text;
                    DeliveryChallanRequest.ModelCode = drpMCode.Text;
                    DeliveryChallanRequest.ModelName = drpMName.Text;
                    DeliveryChallanRequest.ProductName = txtProductName.Text;
                    DeliveryChallanRequest.RawMaterial = txtRawMaterial.Text;
                    DeliveryChallanRequest.RawType = txtType.Text;
                    DeliveryChallanRequest.ProductSize = drpPSize.Text.ToString();
                    DeliveryChallanRequest.OrderDate = ddODate.Text;
                    // DeliveryChallanRequest.ColourName = drpColor.Text.ToString();                 
                    DeliveryChallanRequest.Quantity =Convert.ToInt32(txtQuantity.Text);
                    DeliveryChallanRequest.Weight = Convert.ToInt32(txtWeight.Text);
                    DeliveryChallanRequest.Excess = Convert.ToInt32(txtExcess.Text);
                    DeliveryChallanRequest.AvlQty = txtAvlQty.Text;
                    DeliveryChallanRequest.Shortage = Convert.ToInt32 (txtShortage.Text);
                    DeliveryChallanRequest.DcNo = Convert.ToInt32(txtDCNo.Text);
                    DeliveryChallanRequest.DcDate = ddDCDate.Text;
                    //DeliveryChallanRequest.OrderQty= txtOrderQty.Text;
                    DeliveryChallanRequest.OrderWeight = Convert.ToInt32 (txtWeight.Text);
                    DeliveryChallanRequest.Update();
                    this.Close();

                    FrmClientCompanyProfile CompanyInfo = new FrmClientCompanyProfile();
                    //CompanyInfo.MdiParent = this;
                    CompanyInfo.FrmClientCompanyProfile_Load(sender, e);

                    if (DeliveryChallanRequest.Result.Status == ResultStatus.Success)
                    {
                        XtraMessageBox.Show(DeliveryChallanRequest.Result.Message, "Success", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    }
                }
                else
                {
                    XtraMessageBox.Show("please give the manditory field", "Validating", MessageBoxButtons.OK, MessageBoxIcon.Information);
                }
            }

            catch (Exception ex)
            {
                // Display a warning alert

                XtraMessageBox.Show(ex.Message, "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void drpCName_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpCName.SelectedItem;

            if (selectedItem != null)
            {
                txtDirector.Text = DeliveryChallanRequest.MasterCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }

        private void drpCCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpCCom.SelectedItem;

            if (selectedItem != null)
            {
                txtContractor.Text = DeliveryChallanRequest.ClientCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }
        private void drpSCCom_SelectedIndexChanged(object sender, EventArgs e)
        {
            string selectedItem = (string)drpSCCom.SelectedItem;

            if (selectedItem != null)
            {
                txtSCont.Text = DeliveryChallanRequest.SUbClientCompanyList.FirstOrDefault(item => item.Name == selectedItem.ToString())?.AuthorName ?? "";
            }
        }
        
        public void BindData(dynamic selectedChallanList)
        {
            var selectedRows = selectedChallanList.GetSelectedRows();

            foreach (var rowHandle in selectedRows)
            {
                DeliveryChallanRequest.Id = selectedChallanList.GetRowCellValue(rowHandle, "Id");
               

                drpCName.SelectedIndex = DeliveryChallanRequest.MasterCompanyList.FindIndex(x => x.Id == Convert.ToInt64(selectedChallanList.GetRowCellValue(rowHandle, "CompanyMasterId").ToString()));
               // drpCName.Text = selectedChallanList.GetRowCellValue(rowHandle, "CompanyMasterId");
                drpCCom.SelectedIndex = DeliveryChallanRequest.ClientCompanyList.FindIndex(x => x.Id == Convert.ToInt64(selectedChallanList.GetRowCellValue(rowHandle, "ClientCompanyId").ToString()));
                //drpCCom.Text = selectedChallanList.GetRowCellValue(rowHandle, "ClientCompanyId");
                //drpSCCom.Text = selectedChallanList.GetRowCellValue(rowHandle, "SubclientCompanyId");
                drpSCCom.SelectedIndex = DeliveryChallanRequest.SUbClientCompanyList.FindIndex(x => x.Id == Convert.ToInt64(selectedChallanList.GetRowCellValue(rowHandle, "SubclientCompanyId").ToString()));
                txtDirector.Text = selectedChallanList.GetRowCellValue(rowHandle, "Director");
                txtContractor.Text = selectedChallanList.GetRowCellValue(rowHandle, "Contractor");
                txtSCont.Text = selectedChallanList.GetRowCellValue(rowHandle, "Subcontractor");
                drpCCode.Text = selectedChallanList.GetRowCellValue(rowHandle, "CustomerCode");
               // drpCName.Text = selectedChallanList.GetRowCellValue(rowHandle, "CustomerName");
                //drpOrderCode.Text = selectedChallanList.GetRowCellValue(rowHandle, "OrderNo");
                drpOrderCode.SelectedIndex = DeliveryChallanRequest.OrderMasterList.FindIndex(x => x.Id == Convert.ToInt32(selectedChallanList.GetRowCellValue(rowHandle, "OrderNo").ToString()));
                var datete = selectedChallanList.GetRowCellValue(rowHandle, "OrderDate").ToString();
                ddODate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
                drpMCode.Text = selectedChallanList.GetRowCellValue(rowHandle, "ModelCode");
                drpMName.Text = selectedChallanList.GetRowCellValue(rowHandle, "ModelName");
                txtProductName.Text = selectedChallanList.GetRowCellValue(rowHandle, "ProductName");
                drpPSize.Text = selectedChallanList.GetRowCellValue(rowHandle, "ProductSize");
                txtRawMaterial.Text = selectedChallanList.GetRowCellValue(rowHandle, "RawMaterial");
                txtQuantity.Text = selectedChallanList.GetRowCellValue(rowHandle, "Quantity");
                //txtQuantity.Text( x => x.Id == Convert.ToInt32(selectedChallanList.GetRowCellValue(rowHandle, "Quantity").ToString()));
                txtWeight.Text = selectedChallanList.GetRowCellValue(rowHandle, "Weight");
                txtExcess.Text = selectedChallanList.GetRowCellValue(rowHandle, "Excess");
                drpColor.SelectedIndex= DeliveryChallanRequest.ColorMasterList.FindIndex(x => x.Id == Convert.ToInt32(selectedChallanList.GetRowCellValue(rowHandle, "ColourName").ToString()));
                txtType.Text = selectedChallanList.GetRowCellValue(rowHandle, "RawType");
                txtAvlQty.Text = selectedChallanList.GetRowCellValue(rowHandle, "AvlQty");
                txtShortage.Text = selectedChallanList.GetRowCellValue(rowHandle, "Shortage");
                txtDCNo.Text = selectedChallanList.GetRowCellValue(rowHandle, "DcNo");

                datete = selectedChallanList.GetRowCellValue(rowHandle, "DcDate").ToString();
                ddDCDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";
            }

            btnAdd.Enabled = false;
        }

        private void btnClear_Click(object sender, EventArgs e)
        {
            drpCName.ResetText();
            drpCCom.ResetText();
            drpSCCom.ResetText();
            txtDirector.ResetText();
            txtContractor.ResetText();
            txtSCont.ResetText();
            drpCCode.ResetText();
            drpCName.ResetText();
            drpOrderCode.ResetText();
            ddODate.ResetText();
            drpMCode.ResetText();
            drpMName.ResetText();
            txtProductName.ResetText();
            drpPSize.ResetText();
            txtRawMaterial.ResetText();
            txtQuantity.ResetText();
            txtWeight.ResetText();
            txtExcess.ResetText();
            drpColor.ResetText();
            txtType.ResetText();
            txtAvlQty.ResetText();
            txtShortage.ResetText();
            txtDCNo.ResetText();
            ddDCDate.ResetText();
        }

        private void btnDelete_click(object sender, EventArgs e)
        {

        }

        private void btnEdit_click(object sender, EventArgs e)
        {
            try
            {
                var selectedRows = gridView1.GetSelectedRows();

                foreach (var rowHandle in selectedRows)
                {

                    drpCName.Text = gridView1.GetRowCellValue(rowHandle, "CompanyMasterId").ToString();
                    drpCCom.Text = gridView1.GetRowCellValue(rowHandle, "ClientCompanyId").ToString();
                    drpSCCom.Text = gridView1.GetRowCellValue(rowHandle, "SubclientCompanyId").ToString();
                    txtDirector.Text = gridView1.GetRowCellValue(rowHandle, "Director").ToString();
                    txtContractor.Text = gridView1.GetRowCellValue(rowHandle, "Contractor").ToString();
                    txtSCont.Text = gridView1.GetRowCellValue(rowHandle, "Subcontractor").ToString();
                    drpCCode.Text = gridView1.GetRowCellValue(rowHandle, "CustomerCode").ToString();
                    drpCName.Text = gridView1.GetRowCellValue(rowHandle, "CustomerName").ToString();
                    drpOrderCode.Text = gridView1.GetRowCellValue(rowHandle, "OrderNo").ToString();
                    drpOrderCode.SelectedIndex = DeliveryChallanRequest.OrderMasterList.FindIndex(x => x.Id == Convert.ToInt32(gridView1.GetRowCellValue(rowHandle, "OrderNo").ToString()));
                    var datete = gridView1.GetRowCellValue(rowHandle, "OrderDate").ToString();
                    ddODate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";

                    drpMCode.Text = gridView1.GetRowCellValue(rowHandle, "ModelCode").ToString();
                    drpMName.Text = gridView1.GetRowCellValue(rowHandle, "ModelName").ToString();
                    txtProductName.Text = gridView1.GetRowCellValue(rowHandle, "ProductName").ToString();
                    drpPSize.Text = gridView1.GetRowCellValue(rowHandle, "ProductSize").ToString();
                    txtRawMaterial.Text = gridView1.GetRowCellValue(rowHandle, "RawMaterial").ToString();
                    txtQuantity.Text = gridView1.GetRowCellValue(rowHandle, "Quantity").ToString();
                    txtWeight.Text = gridView1.GetRowCellValue(rowHandle, "Weight").ToString();
                    txtExcess.Text = gridView1.GetRowCellValue(rowHandle, "Excess").ToString();
                    drpColor.SelectedIndex = DeliveryChallanRequest.ColorMasterList.FindIndex(x => x.Id == Convert.ToInt32(gridView1.GetRowCellValue(rowHandle, "ColourName").ToString()));
                    txtType.Text = gridView1.GetRowCellValue(rowHandle, "RawType").ToString();
                    txtAvlQty.Text = gridView1.GetRowCellValue(rowHandle, "AvlQty").ToString();
                    txtShortage.Text = gridView1.GetRowCellValue(rowHandle, "Shortage").ToString();
                    txtDCNo.Text = gridView1.GetRowCellValue(rowHandle, "DcNo").ToString();

                    datete = gridView1.GetRowCellValue(rowHandle, "DcDate").ToString();
                    ddDCDate.Text = datete != "" ? DateTime.Parse(datete).ToString("MM-dd-yyyy") : "";


                }
                btnAdd.Enabled = false;
                btnEdit.Enabled = false;
                btnDelete.Enabled = true;
                btnUpdate.Enabled = true;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private void FrmDeliveryChallanInfo_Load(object sender, EventArgs e)
        {
            // Scale our form to look like it did when we designed it.
            // This adjusts between the screen resolution of the design computer and the workstation.
            int ourScreenWidth = Screen.FromControl(this).WorkingArea.Width;
            int ourScreenHeight = Screen.FromControl(this).WorkingArea.Height;
            float scaleFactorWidth = ourScreenWidth / 1600f;
            float scaleFactorHeigth = ourScreenHeight / 900f;
            SizeF scaleFactor = new SizeF(scaleFactorWidth, scaleFactorHeigth);
            Scale(scaleFactor);

            // If you want to center the resized screen.
            CenterToScreen();
        }
    }
}